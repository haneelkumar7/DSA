//memoisation

class Solution {
private:
    int solve(int i,int buy, int cap, vector<int> prices,vector<vector<vector<int>>> &dp){
        if(cap == 0) return 0;
        if(i == prices.size()) return 0;
        if(dp[i][buy][cap] != -1) return dp[i][buy][cap];
        
        int profit = 0;
        if(buy){
            profit = max(-prices[i] + solve(i+1,0,cap,prices,dp) , 0 + solve(i+1,1,cap,prices,dp));
        }
        else{
            profit = max(prices[i] + solve(i+1,1,cap-1,prices,dp) , 0 + solve(i+1,0,cap,prices,dp));
        }
        
        return dp[i][buy][cap] = profit;
    }
public:
    int maxProfit(vector<int>& prices) {
        int n(prices.size());
        vector<vector<vector<int>>> dp(n,vector<vector<int>> (2,vector<int> (3,-1)));
        return solve(0,1,2,prices,dp);
    }
};

//tabulation

class Solution {

public:
    int maxProfit(vector<int>& prices) {
        
        int n(prices.size());
        vector<vector<vector<int>>> dp(n+1,vector<vector<int>> (2,vector<int> (3,0)));
        
        for(int i=0;i<=n;i++){
            for(int j=0;j<2;j++){
                dp[i][j][0] = 0;
            }
        }
        for(int i=0;i<2;i++){
            for(int j=0;j<3;j++){
                dp[n][i][j] = 0;
            }
        }
        
        for(int i=n-1;i>=0;i--){
            for(int buy=1;buy>=0;buy--){
                for(int cap=2;cap>=1;cap--){
                    int profit = 0;
                    if(buy){
                        profit = max(-prices[i] + dp[i+1][0][cap] , 0 + dp[i+1][1][cap]);
                    }
                    else{
                        profit = max(prices[i] + dp[i+1][1][cap-1] , 0 + dp[i+1][0][cap]);
                    }

                    dp[i][buy][cap] = profit;
                }
            }
        }
        
        return dp[0][1][2];
    }
};
